#pragma once

#include "engdef.h"

#include <vector>
#include <string>
#include <set>

using namespace std;

// ------------------------------------------------------------------------------------------------
class CIFCEntity
{

private: // Members

	// --------------------------------------------------------------------------------------------
	// Entity
	int_t m_iEntity;

	// --------------------------------------------------------------------------------------------
	// Name
	wstring m_strName;

	// --------------------------------------------------------------------------------------------
	// Entity
	CIFCEntity * m_pParent;

	// --------------------------------------------------------------------------------------------
	// Attributes
	int_t m_iAttributesCount;

	// --------------------------------------------------------------------------------------------
	// Attributes
	vector<wstring> m_vecAttributes;

	// --------------------------------------------------------------------------------------------
	// Ignored Attributes, e.g. don't show in Relations View
	set<wstring> m_setIgnoredAttributes;

	// --------------------------------------------------------------------------------------------
	// Attributes
	int_t m_iInstancesCount;

	// --------------------------------------------------------------------------------------------
	// Sub-types
	vector<CIFCEntity *> m_vecSubTypes;

	// --------------------------------------------------------------------------------------------
	// Instances
	vector<int_t> m_vecInstances;

public: // Methods

	// --------------------------------------------------------------------------------------------
	// ctor
	CIFCEntity(int_t iModel, int_t iEntity, int_t iAttributesCount, int_t iInstancesCount);

	// --------------------------------------------------------------------------------------------
	// dtor
	virtual ~CIFCEntity();

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getEntity() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	const wchar_t* getName() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	CIFCEntity * getParent() const;

	// --------------------------------------------------------------------------------------------
	// Setter
	void setParent(CIFCEntity * pParent);

	// --------------------------------------------------------------------------------------------
	// Getter
	bool hasParent() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getAttributesCount() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	const vector<wstring> & getAttributes() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	const set<wstring>& getIgnoredAttributes() const;

	// --------------------------------------------------------------------------------------------
	// Ignore
	void ignoreAttribute(const wstring& strAttribute, bool bIgnore);

	// --------------------------------------------------------------------------------------------
	// Ignore
	bool isAttributeIgnored(const wstring& strAttribute) const;

	// --------------------------------------------------------------------------------------------
	// Ownership: own/inherited
	bool isAttributeInherited(const wstring & strAttribute) const;

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getInstancesCount() const;

	// --------------------------------------------------------------------------------------------
	// Setter
	void addSubType(CIFCEntity * pEntity);

	// --------------------------------------------------------------------------------------------
	// Getter
	const vector<CIFCEntity *> & getSubTypes() const;

	// --------------------------------------------------------------------------------------------
	// Getter
	const vector<int_t> & getInstances() const;

	// --------------------------------------------------------------------------------------------
	// Sort the data structures
	void postProcessing();
};

// ------------------------------------------------------------------------------------------------
struct SORT_IFC_ENTITIES
{
	bool operator()(const CIFCEntity * a, const CIFCEntity * b) const
	{
		return wcscmp(a->getName(), b->getName()) < 0;
	}
};