#pragma once

#include "Instance.h"
#include "Entity.h"

#include <map>

using namespace std;

// ------------------------------------------------------------------------------------------------
enum class enumModelType
{
	Unknown = -1,
	STEP = 0,
	IFC = 1
};

// ------------------------------------------------------------------------------------------------
class CModel
{

protected: // Members

	// --------------------------------------------------------------------------------------------
	enumModelType m_enModelType;

public: // Methods

	// --------------------------------------------------------------------------------------------
	CModel(enumModelType enModelType);

	// --------------------------------------------------------------------------------------------
	virtual ~CModel();

	// --------------------------------------------------------------------------------------------
	virtual const wchar_t* GetModelName() const PURE;

	// --------------------------------------------------------------------------------------------	
	enumModelType GetType() const;

	// --------------------------------------------------------------------------------------------	
	virtual int64_t GetInstance() const PURE;	

	// --------------------------------------------------------------------------------------------	
	virtual CEntityProvider* GetEntityProvider() const PURE;

	// --------------------------------------------------------------------------------------------
	virtual void ZoomToInstance(CInstance* pInstance) PURE;

	// --------------------------------------------------------------------------------------------
	virtual void ZoomOut() PURE;

	// --------------------------------------------------------------------------------------------	
	template<typename T>
	T* As()
	{
		return dynamic_cast<T*>(this);
	}
};

