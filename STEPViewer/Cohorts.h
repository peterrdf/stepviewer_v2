#pragma once

#include "Generic.h"

#include <vector>

using namespace std;

// ------------------------------------------------------------------------------------------------
class CWireframesCohort
{
	// --------------------------------------------------------------------------------------------
	friend class CIFCModel;

private: // Members

	// --------------------------------------------------------------------------------------------
	// Indices
	vector<GLuint> m_vecIndices;

	// --------------------------------------------------------------------------------------------
	// IBO
	GLuint m_iIBO;

	// --------------------------------------------------------------------------------------------
	// IBO - Offset
	GLsizei m_iIBOOffset;


public: // Methods

	// --------------------------------------------------------------------------------------------
	// ctor
	CWireframesCohort()
		: m_vecIndices()
		, m_iIBO(0)
		, m_iIBOOffset(0)
	{
	}

	// --------------------------------------------------------------------------------------------
	// ctor
	~CWireframesCohort()
	{
	}

	// --------------------------------------------------------------------------------------------
	// Setter
	void addIndex(GLuint index)
	{
		m_vecIndices.push_back(index);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	GLuint* getIndices()
	{
		return &(m_vecIndices[0]);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getIndicesCount()
	{
		return m_vecIndices.size();
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLuint& IBO()
	{
		return m_iIBO;
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLsizei& IBOOffset()
	{
		return m_iIBOOffset;
	}
};

// ------------------------------------------------------------------------------------------------
class CLinesCohort
{
	// --------------------------------------------------------------------------------------------
	friend class CIFCModel;

private: // Members

	// --------------------------------------------------------------------------------------------
	// Indices
	vector<GLuint> m_vecIndices;

	// --------------------------------------------------------------------------------------------
	// IBO
	GLuint m_iIBO;

	// --------------------------------------------------------------------------------------------
	// IBO - Offset
	GLsizei m_iIBOOffset;

public: // Methods

	// --------------------------------------------------------------------------------------------
	// ctor
	CLinesCohort()
		: m_vecIndices()
		, m_iIBO(0)
		, m_iIBOOffset(0)
	{
	}

	// --------------------------------------------------------------------------------------------
	// ctor
	~CLinesCohort()
	{
	}

	// --------------------------------------------------------------------------------------------
	// Setter
	void addIndex(GLuint index)
	{
		m_vecIndices.push_back(index);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	GLuint* getIndices()
	{
		return &(m_vecIndices[0]);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getIndicesCount()
	{
		return m_vecIndices.size();
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLuint& IBO()
	{
		return m_iIBO;
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLsizei& IBOOffset()
	{
		return m_iIBOOffset;
	}
};

// ------------------------------------------------------------------------------------------------
class CPointsCohort
{
	// --------------------------------------------------------------------------------------------
	friend class CIFCModel;

private: // Members

	// --------------------------------------------------------------------------------------------
	// Indices
	vector<GLuint> m_vecIndices;

	// --------------------------------------------------------------------------------------------
	// IBO
	GLuint m_iIBO;

	// --------------------------------------------------------------------------------------------
	// IBO - Offset
	GLsizei m_iIBOOffset;

public: // Methods

	// --------------------------------------------------------------------------------------------
	// ctor
	CPointsCohort()
		: m_vecIndices()
		, m_iIBO(0)
		, m_iIBOOffset(0)
	{
	}

	// --------------------------------------------------------------------------------------------
	// ctor
	~CPointsCohort()
	{
	}

	// --------------------------------------------------------------------------------------------
	// Setter
	void addIndex(GLuint index)
	{
		m_vecIndices.push_back(index);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	GLuint* getIndices()
	{
		return &(m_vecIndices[0]);
	}

	// --------------------------------------------------------------------------------------------
	// Getter
	int_t getIndicesCount()
	{
		return m_vecIndices.size();
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLuint& IBO()
	{
		return m_iIBO;
	}

	// --------------------------------------------------------------------------------------------
	// Accessor
	GLsizei& IBOOffset()
	{
		return m_iIBOOffset;
	}
};

