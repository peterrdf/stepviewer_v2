#version 330

in float vUseBlinnPhongModel;
in vec4 vPosition;
in vec3 vTransformedNormal;

in float vUseTexture;
in vec2 vTextureCoord;

uniform vec3 uPointLightingLocation = vec3(0.0, 0.0, 10000.0);
uniform vec3 uAmbientLightWeighting = vec3(0.001, 0.001, 0.001);
uniform vec3 uSpecularLightWeighting = vec3(0.8, 0.8, 0.8);
uniform vec3 uDiffuseLightWeighting = vec3(0.8, 0.8, 0.8);

uniform float uMaterialShininess = 30.0;

// default: 0.75, 0.125, 2.2
uniform float uContrast = 1.50;   
uniform float uBrightness = 0.175;
uniform float uGamma = 1.25;

uniform vec3 uMaterialAmbientColor;
uniform float uTransparency;
uniform vec3 uMaterialDiffuseColor;
uniform vec3 uMaterialSpecularColor;
uniform vec3 uMaterialEmissiveColor;

uniform sampler2D uSampler;

layout(location = 0) out vec4 FragColor;

void main(void) {
    if (vUseTexture > 0.5) {
        FragColor = texture(uSampler, vTextureCoord);
    }
    else {
        if (vUseBlinnPhongModel > 0.5) {
            vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);
            vec3 normal = normalize(vTransformedNormal);

            vec3 eyeDirection = normalize(-vPosition.xyz);
            vec3 reflectionDirection = reflect(-lightDirection, normal);

            float specularLightBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);
            vec3 specularLightWeighting = uSpecularLightWeighting * specularLightBrightness;

            float diffuseLightBrightness = max(dot(normal, lightDirection), 0.0);
            vec3 diffuseLightWeighting = uDiffuseLightWeighting * diffuseLightBrightness;            

            vec4 color = vec4(
                uMaterialAmbientColor * uAmbientLightWeighting
                + uMaterialDiffuseColor * diffuseLightWeighting
                + uMaterialSpecularColor * specularLightWeighting
                + uMaterialEmissiveColor,
                uTransparency);

            vec4 newColor = vec4(0.0, 0.0, 0.0, uTransparency);
            newColor.r = (pow(color.r, uGamma) - 0.5) * uContrast + uBrightness + 0.5;
            newColor.g = (pow(color.g, uGamma) - 0.5) * uContrast + uBrightness + 0.5;
            newColor.b = (pow(color.b, uGamma) - 0.5) * uContrast + uBrightness + 0.5;

            FragColor = newColor;
        } // if (vUseBlinnPhongModel > ...
        else {
            FragColor = vec4(uMaterialAmbientColor, uTransparency);
        }
    }
}